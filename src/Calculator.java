/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Mohamed
 */
import java.awt.Image;
import java.awt.Toolkit;
import java.math.*;
import static sun.io.Win32ErrorMode.initialize;

public class Calculator extends javax.swing.JFrame {

    /**
     * Creates new form Calculator
     */
    private boolean decdisp;
    private boolean numdisp;
    private boolean sh;
    private boolean degr;
    private boolean alert;
    private double num1;
    private double num2;
    private double res;
    private byte Pos;

    public Calculator() {
        initComponents();
        this.setLocation(300, 100);
        initialize();
    }
     private void initialize(){
         this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("calculator-icon.png")));
     }
    
       
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        Field2 = new javax.swing.JTextField();
        Field1 = new javax.swing.JTextField();
        Field3 = new javax.swing.JTextField();
        memoryclear = new javax.swing.JButton();
        memoryread = new javax.swing.JButton();
        onedividednumber = new javax.swing.JButton();
        percent = new javax.swing.JButton();
        memorysave = new javax.swing.JButton();
        cos = new javax.swing.JButton();
        tan = new javax.swing.JButton();
        PI = new javax.swing.JButton();
        sin = new javax.swing.JButton();
        add = new javax.swing.JButton();
        cubed = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        subtracte = new javax.swing.JButton();
        root = new javax.swing.JButton();
        six = new javax.swing.JButton();
        five = new javax.swing.JButton();
        four = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        square = new javax.swing.JButton();
        three = new javax.swing.JButton();
        two = new javax.swing.JButton();
        one = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        squareroot = new javax.swing.JButton();
        negative = new javax.swing.JButton();
        decpoint = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        equal = new javax.swing.JButton();
        Degrees = new javax.swing.JRadioButton();
        Radians = new javax.swing.JRadioButton();
        shift = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculator Developed by Ghoraba");
        setBackground(java.awt.Color.darkGray);

        Field2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        Field2.setText("0");
        Field2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.lightGray));
        Field2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Field2.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Field2.setDoubleBuffered(true);
        Field2.setFocusCycleRoot(true);
        Field2.setFocusable(false);
        Field2.setName(""); // NOI18N

        Field1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Field1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.lightGray));
        Field1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Field1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Field1.setDoubleBuffered(true);
        Field1.setFocusCycleRoot(true);
        Field1.setFocusable(false);
        Field1.setName(""); // NOI18N

        Field3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Field3.setText("0");
        Field3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.darkGray, java.awt.Color.lightGray));
        Field3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Field3.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Field3.setDoubleBuffered(true);
        Field3.setFocusCycleRoot(true);
        Field3.setFocusable(false);
        Field3.setName(""); // NOI18N

        memoryclear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        memoryclear.setText("MC");
        memoryclear.setAutoscrolls(true);
        memoryclear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        memoryclear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        memoryclear.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        memoryclear.setDoubleBuffered(true);
        memoryclear.setFocusCycleRoot(true);
        memoryclear.setFocusable(false);
        memoryclear.setName(""); // NOI18N
        memoryclear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryclearActionPerformed(evt);
            }
        });

        memoryread.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        memoryread.setText("MR");
        memoryread.setAutoscrolls(true);
        memoryread.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        memoryread.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        memoryread.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        memoryread.setDoubleBuffered(true);
        memoryread.setFocusCycleRoot(true);
        memoryread.setFocusable(false);
        memoryread.setName(""); // NOI18N
        memoryread.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoryreadActionPerformed(evt);
            }
        });

        onedividednumber.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        onedividednumber.setText("1/x");
        onedividednumber.setAutoscrolls(true);
        onedividednumber.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        onedividednumber.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        onedividednumber.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        onedividednumber.setDoubleBuffered(true);
        onedividednumber.setFocusCycleRoot(true);
        onedividednumber.setFocusable(false);
        onedividednumber.setName(""); // NOI18N
        onedividednumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onedividednumberActionPerformed(evt);
            }
        });

        percent.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        percent.setText("%");
        percent.setAutoscrolls(true);
        percent.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        percent.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        percent.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        percent.setDoubleBuffered(true);
        percent.setFocusCycleRoot(true);
        percent.setFocusable(false);
        percent.setName(""); // NOI18N
        percent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentActionPerformed(evt);
            }
        });

        memorysave.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        memorysave.setText("MS");
        memorysave.setAutoscrolls(true);
        memorysave.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        memorysave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        memorysave.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        memorysave.setDoubleBuffered(true);
        memorysave.setFocusCycleRoot(true);
        memorysave.setFocusable(false);
        memorysave.setName(""); // NOI18N
        memorysave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memorysaveActionPerformed(evt);
            }
        });

        cos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cos.setText("Cos");
        cos.setAutoscrolls(true);
        cos.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cos.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        cos.setDoubleBuffered(true);
        cos.setFocusCycleRoot(true);
        cos.setFocusable(false);
        cos.setName(""); // NOI18N
        cos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosActionPerformed(evt);
            }
        });

        tan.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tan.setText("Tan");
        tan.setAutoscrolls(true);
        tan.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tan.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        tan.setDoubleBuffered(true);
        tan.setFocusCycleRoot(true);
        tan.setFocusable(false);
        tan.setName(""); // NOI18N
        tan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanActionPerformed(evt);
            }
        });

        PI.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        PI.setText("π");
        PI.setAutoscrolls(true);
        PI.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PI.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PI.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        PI.setDoubleBuffered(true);
        PI.setFocusCycleRoot(true);
        PI.setFocusable(false);
        PI.setName(""); // NOI18N
        PI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PIActionPerformed(evt);
            }
        });

        sin.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sin.setText("Sin");
        sin.setAutoscrolls(true);
        sin.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sin.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        sin.setDoubleBuffered(true);
        sin.setFocusCycleRoot(true);
        sin.setFocusable(false);
        sin.setName(""); // NOI18N
        sin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        add.setText("+");
        add.setAutoscrolls(true);
        add.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        add.setDoubleBuffered(true);
        add.setFocusCycleRoot(true);
        add.setFocusable(false);
        add.setName(""); // NOI18N
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        cubed.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cubed.setText("X³");
        cubed.setAutoscrolls(true);
        cubed.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cubed.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cubed.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        cubed.setDoubleBuffered(true);
        cubed.setFocusCycleRoot(true);
        cubed.setFocusable(false);
        cubed.setName(""); // NOI18N
        cubed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cubedActionPerformed(evt);
            }
        });

        nine.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nine.setText("9");
        nine.setAutoscrolls(true);
        nine.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        nine.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        nine.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        nine.setDoubleBuffered(true);
        nine.setFocusCycleRoot(true);
        nine.setFocusable(false);
        nine.setName(""); // NOI18N
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        eight.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        eight.setText("8");
        eight.setAutoscrolls(true);
        eight.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        eight.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eight.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        eight.setDoubleBuffered(true);
        eight.setFocusCycleRoot(true);
        eight.setFocusable(false);
        eight.setName(""); // NOI18N
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        seven.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        seven.setText("7");
        seven.setAutoscrolls(true);
        seven.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        seven.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        seven.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        seven.setDoubleBuffered(true);
        seven.setFocusCycleRoot(true);
        seven.setFocusable(false);
        seven.setName(""); // NOI18N
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        subtracte.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        subtracte.setText("-");
        subtracte.setAutoscrolls(true);
        subtracte.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        subtracte.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        subtracte.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        subtracte.setDoubleBuffered(true);
        subtracte.setFocusCycleRoot(true);
        subtracte.setFocusable(false);
        subtracte.setName(""); // NOI18N
        subtracte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtracteActionPerformed(evt);
            }
        });

        root.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        root.setText("√");
        root.setAutoscrolls(true);
        root.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        root.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        root.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        root.setDoubleBuffered(true);
        root.setFocusCycleRoot(true);
        root.setFocusable(false);
        root.setName(""); // NOI18N
        root.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rootActionPerformed(evt);
            }
        });

        six.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        six.setText("6");
        six.setAutoscrolls(true);
        six.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        six.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        six.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        six.setDoubleBuffered(true);
        six.setFocusCycleRoot(true);
        six.setFocusable(false);
        six.setName(""); // NOI18N
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        five.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        five.setText("5");
        five.setAutoscrolls(true);
        five.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        five.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        five.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        five.setDoubleBuffered(true);
        five.setFocusCycleRoot(true);
        five.setFocusable(false);
        five.setName(""); // NOI18N
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        four.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        four.setText("4");
        four.setAutoscrolls(true);
        four.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        four.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        four.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        four.setDoubleBuffered(true);
        four.setFocusCycleRoot(true);
        four.setFocusable(false);
        four.setName(""); // NOI18N
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        multiply.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        multiply.setText("×");
        multiply.setAutoscrolls(true);
        multiply.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        multiply.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        multiply.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        multiply.setDoubleBuffered(true);
        multiply.setFocusCycleRoot(true);
        multiply.setFocusable(false);
        multiply.setName(""); // NOI18N
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyActionPerformed(evt);
            }
        });

        square.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        square.setText("X²");
        square.setAutoscrolls(true);
        square.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        square.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        square.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        square.setDoubleBuffered(true);
        square.setFocusCycleRoot(true);
        square.setFocusable(false);
        square.setName(""); // NOI18N
        square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareActionPerformed(evt);
            }
        });

        three.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        three.setText("3");
        three.setAutoscrolls(true);
        three.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        three.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        three.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        three.setDoubleBuffered(true);
        three.setFocusCycleRoot(true);
        three.setFocusable(false);
        three.setName(""); // NOI18N
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        two.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        two.setText("2");
        two.setAutoscrolls(true);
        two.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        two.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        two.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        two.setDoubleBuffered(true);
        two.setFocusCycleRoot(true);
        two.setFocusable(false);
        two.setName(""); // NOI18N
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        one.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        one.setText("1");
        one.setAutoscrolls(true);
        one.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        one.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        one.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        one.setDoubleBuffered(true);
        one.setFocusCycleRoot(true);
        one.setFocusable(false);
        one.setName(""); // NOI18N
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        divide.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        divide.setText("÷");
        divide.setAutoscrolls(true);
        divide.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        divide.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        divide.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        divide.setDoubleBuffered(true);
        divide.setFocusCycleRoot(true);
        divide.setFocusable(false);
        divide.setName(""); // NOI18N
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        squareroot.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        squareroot.setText("³√");
        squareroot.setAutoscrolls(true);
        squareroot.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        squareroot.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        squareroot.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        squareroot.setDoubleBuffered(true);
        squareroot.setFocusCycleRoot(true);
        squareroot.setFocusable(false);
        squareroot.setName(""); // NOI18N
        squareroot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squarerootActionPerformed(evt);
            }
        });

        negative.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        negative.setText("± ");
        negative.setAutoscrolls(true);
        negative.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        negative.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        negative.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        negative.setDoubleBuffered(true);
        negative.setFocusCycleRoot(true);
        negative.setFocusable(false);
        negative.setName(""); // NOI18N
        negative.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativeActionPerformed(evt);
            }
        });

        decpoint.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        decpoint.setText(".");
        decpoint.setAutoscrolls(true);
        decpoint.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        decpoint.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        decpoint.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        decpoint.setDoubleBuffered(true);
        decpoint.setFocusCycleRoot(true);
        decpoint.setFocusable(false);
        decpoint.setName(""); // NOI18N
        decpoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decpointActionPerformed(evt);
            }
        });

        zero.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        zero.setText("0");
        zero.setAutoscrolls(true);
        zero.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        zero.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        zero.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        zero.setDoubleBuffered(true);
        zero.setFocusCycleRoot(true);
        zero.setFocusable(false);
        zero.setName(""); // NOI18N
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        reset.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        reset.setText("C");
        reset.setAutoscrolls(true);
        reset.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        reset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reset.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        reset.setDoubleBuffered(true);
        reset.setFocusCycleRoot(true);
        reset.setFocusable(false);
        reset.setName(""); // NOI18N
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        clear.setText("CE");
        clear.setAutoscrolls(true);
        clear.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        clear.setDoubleBuffered(true);
        clear.setFocusCycleRoot(true);
        clear.setFocusable(false);
        clear.setName(""); // NOI18N
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        equal.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        equal.setText("=");
        equal.setAutoscrolls(true);
        equal.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        equal.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        equal.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        equal.setDoubleBuffered(true);
        equal.setFocusCycleRoot(true);
        equal.setFocusable(false);
        equal.setName(""); // NOI18N
        equal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalActionPerformed(evt);
            }
        });

        buttonGroup1.add(Degrees);
        Degrees.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Degrees.setSelected(true);
        Degrees.setText("Degrees");
        Degrees.setAutoscrolls(true);
        Degrees.setBorder(null);
        Degrees.setBorderPainted(true);
        Degrees.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Degrees.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Degrees.setDoubleBuffered(true);
        Degrees.setFocusCycleRoot(true);
        Degrees.setFocusable(false);
        Degrees.setName(""); // NOI18N
        Degrees.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                DegreesFocusGained(evt);
            }
        });
        Degrees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DegreesActionPerformed(evt);
            }
        });

        buttonGroup1.add(Radians);
        Radians.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Radians.setText("Radians");
        Radians.setAutoscrolls(true);
        Radians.setBorder(null);
        Radians.setBorderPainted(true);
        Radians.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Radians.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Radians.setDoubleBuffered(true);
        Radians.setFocusCycleRoot(true);
        Radians.setFocusable(false);
        Radians.setName(""); // NOI18N
        Radians.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadiansActionPerformed(evt);
            }
        });

        shift.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        shift.setText("Sh");
        shift.setAutoscrolls(true);
        shift.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        shift.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        shift.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        shift.setDoubleBuffered(true);
        shift.setFocusCycleRoot(true);
        shift.setFocusable(false);
        shift.setName(""); // NOI18N
        shift.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shiftMouseClicked(evt);
            }
        });
        shift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shiftActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Field1)
                    .addComponent(Field2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Degrees)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Radians)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(percent, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(onedividednumber, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(Field3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(shift, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PI, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(memoryread, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(memoryclear, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(memorysave, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decpoint, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(negative, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(squareroot, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(equal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cubed, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(root, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subtracte, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(square, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(Field1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Field2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Field3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(memorysave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(memoryclear, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(memoryread, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onedividednumber, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(percent, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Degrees)
                    .addComponent(Radians))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shift, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(PI, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cubed, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subtracte, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(root, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(square, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(squareroot, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(negative, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decpoint, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reset, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(equal, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
       if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "0");
    }//GEN-LAST:event_zeroActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "1");
        numdisp = true;

    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
       if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "2");
        numdisp = true;
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "3");
        numdisp = true;
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "4");
        numdisp = true;
    }//GEN-LAST:event_fourActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "5");
        numdisp = true;
    }//GEN-LAST:event_fiveActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "6");
        numdisp = true;
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "7");
        numdisp = true;
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "8");
        numdisp = true;
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        if(alert)
       {
           Field2.setText(null);
       }
        if (!numdisp && !decdisp) {
            Field2.setText(null);
        }
        Field2.setText(Field2.getText() + "9");
        numdisp = true;
    }//GEN-LAST:event_nineActionPerformed

    private void decpointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decpointActionPerformed
        if (!decdisp) {
            Field2.setText(Field2.getText() + ".");
        }
        decdisp = true;
    }//GEN-LAST:event_decpointActionPerformed

    private void negativeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativeActionPerformed
        if (numdisp) {
            num1 = Double.parseDouble(Field2.getText());
            res = num1 * -1;
            if (res > -100000000 && res < 100000000) {
                Field2.setText(String.valueOf(res));
            } else {
                Field2.setText("Error");
                numdisp = false;
            }
            res = 0;
        }
    }//GEN-LAST:event_negativeActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        Field2.setText("0");
        decdisp = false;
        numdisp = false;
    }//GEN-LAST:event_clearActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
        Field2.setText("0");
        Field1.setText(null);
        decdisp = false;
        numdisp = false;
        num1 = 0;
        num2 = 0;
        res = 0;
        Pos = 0;
    }//GEN-LAST:event_resetActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        if (Pos == 0) {
            num1 = Double.parseDouble(Field2.getText());
        } else {
            num2 = Double.parseDouble(Field2.getText());
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field1.setText(String.valueOf(num1) + "+");
        Field2.setText("0");
        decdisp = false;
        numdisp = false;
        Pos = 1;
    }//GEN-LAST:event_addActionPerformed

    private void subtracteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtracteActionPerformed
        if (Pos == 0) {
            num1 = Double.parseDouble(Field2.getText());
        } else {
            num2 = Double.parseDouble(Field2.getText());
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field1.setText(String.valueOf(num1) + "-");
        Field2.setText("0");
        decdisp = false;
        numdisp = false;
        Pos = 2;
    }//GEN-LAST:event_subtracteActionPerformed

    private void multiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyActionPerformed
        if (Pos == 0) {
            num1 = Double.parseDouble(String.valueOf(Field2.getText()));
        } else {
            num2 = Double.parseDouble(String.valueOf(Field2.getText()));
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field1.setText(String.valueOf(num1) + "*");
        Field2.setText("0");
        decdisp = false;
        numdisp = false;
        Pos = 3;
    }//GEN-LAST:event_multiplyActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        if (Pos == 0) {
            num1 = Double.parseDouble(Field2.getText());
        } else {
            num2 = Double.parseDouble(Field2.getText());
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field1.setText(String.valueOf(num1) + "/");
        Field2.setText("0");
        decdisp = false;
        numdisp = false;
        Pos = 4;
    }//GEN-LAST:event_divideActionPerformed

    private void equalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalActionPerformed
        num2 = Double.parseDouble(Field2.getText());
        if (Pos == 0) {
            res = num2;
            Field1.setText(String.valueOf(num2));
        }
        if (Pos == 1) {
            res = num1 + num2;
            Field1.setText(Field1.getText() + String.valueOf(num2));
        }
        if (Pos == 2) {
            res = num1 - num2;
            Field1.setText(Field1.getText() + String.valueOf(num2));
        }
        if (Pos == 3) {
            res = num1 * num2;
            Field1.setText(Field1.getText() + String.valueOf(num2));
        }
        if (Pos == 4) {
            res = num1 / num2;
            Field1.setText(Field1.getText() + String.valueOf(num2));
        }
        if (Pos == 5) {
            res = num1 * num2 / 100;
            Field1.setText(Field1.getText() + String.valueOf(num2) + ")");
        }
        if (res > -100000000 && res < 100000000) {
            Field2.setText(String.valueOf(res));
        } else {
            Field2.setText("Error");
        }
        decdisp = false;
        numdisp = false;
        num1 = 0;
        num2 = 0;
        res = 0;
        Pos = 0;
        alert=true;

    }//GEN-LAST:event_equalActionPerformed

    private void percentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentActionPerformed
        num1 = Double.parseDouble(Field2.getText());
        Field2.setText("0");
        Field1.setText(String.valueOf(num1) + "%(");
        decdisp = false;
        numdisp = false;
        Pos = 5;
    }//GEN-LAST:event_percentActionPerformed

    private void onedividednumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onedividednumberActionPerformed

        if (Pos == 0) {
            num1 = Double.parseDouble(Field2.getText());
            Field1.setText("1/" + String.valueOf(num1));
            num1 = 1 / num1;
        } else {
            num2 = Double.parseDouble(Field2.getText());
            Field1.setText(Field1.getText() + "1/" + String.valueOf(num2));
            num2 = 1 / num2;
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field2.setText(String.valueOf(num1));
        Pos = 0;
    }//GEN-LAST:event_onedividednumberActionPerformed

    private void PIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PIActionPerformed
        Field2.setText(String.valueOf(Math.PI));
    }//GEN-LAST:event_PIActionPerformed

    private void memoryreadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryreadActionPerformed
        Field2.setText(Field3.getText());
    }//GEN-LAST:event_memoryreadActionPerformed

    private void memoryclearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoryclearActionPerformed
        Field3.setText("0");
    }//GEN-LAST:event_memoryclearActionPerformed

    private void memorysaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memorysaveActionPerformed
        Field3.setText(Field2.getText());
    }//GEN-LAST:event_memorysaveActionPerformed

    private void DegreesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DegreesActionPerformed
        degr = false;
    }//GEN-LAST:event_DegreesActionPerformed

    private void RadiansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadiansActionPerformed
        degr = true;
    }//GEN-LAST:event_RadiansActionPerformed

    private void shiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shiftActionPerformed

    }//GEN-LAST:event_shiftActionPerformed

    private void squareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareActionPerformed

        if (Pos == 0) {
            num1 = Double.parseDouble(Field2.getText());
            Field1.setText(String.valueOf(num1) + "²");
            num1 = num1 * num1;
            Field1.setText(String.valueOf(num1));
        } else {
            num2 = Double.parseDouble(Field2.getText());
            Field1.setText(Field1.getText() + String.valueOf(num2) + "²");
            num2 = num2 * num2;
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field2.setText(String.valueOf(num1));
        Pos = 0;
    }//GEN-LAST:event_squareActionPerformed

    private void shiftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftMouseClicked
        sh = !sh;
    }//GEN-LAST:event_shiftMouseClicked

    private void sinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinActionPerformed

        if (!sh) {
            if (!degr) {

                if (Pos == 0) {
                    num1 = Double.parseDouble(Field2.getText());
                    Field1.setText("sin(" + String.valueOf(num1) + ")");
                    num1 = num1 * 0.0174532925;
                    num1 = Math.sin(num1);
                } else {
                    num2 = Double.parseDouble(Field2.getText());
                    Field1.setText(Field1.getText() + "sin(" + String.valueOf(num2) + ")");
                    num2 = num2 * 0.0174532925;
                    num2 = Math.sin(num2);
                }
                if (Pos == 1) {
                    num1 = num1 + num2;
                }
                if (Pos == 2) {
                    num1 = num1 - num2;
                }
                if (Pos == 3) {
                    num1 = num1 * num2;
                }
                if (Pos == 4) {
                    num1 = num1 / num2;
                }
                if (Pos == 5) {
                    num1 = num1 * num2 / 100;
                }             
                Field2.setText(String.valueOf(num1));
                Pos = 0;
            }
            else
            {
                if (Pos == 0) {
                    num1 = Double.parseDouble(Field2.getText());
                    Field1.setText("sin(" + String.valueOf(num1) + ")");
                    num1 = Math.sin(num1);
                } else {
                    num2 = Double.parseDouble(Field2.getText());
                    Field1.setText(Field1.getText() + "sin(" + String.valueOf(num2) + ")");
                    num2 = Math.sin(num2);
                }
                if (Pos == 1) {
                    num1 = num1 + num2;
                }
                if (Pos == 2) {
                    num1 = num1 - num2;
                }
                if (Pos == 3) {
                    num1 = num1 * num2;
                }
                if (Pos == 4) {
                    num1 = num1 / num2;
                }
                if (Pos == 5) {
                    num1 = num1 * num2 / 100;
                }             
                Field2.setText(String.valueOf(num1));
                Pos = 0;
            }
        } else {

            if (Pos == 0) {
                num1 = Double.parseDouble(Field2.getText());
                Field1.setText("sinh(" + String.valueOf(num1) + ")");
                num1 = Math.sinh(num1);
            } else {
                num2 = Double.parseDouble(Field2.getText());
                Field1.setText(Field1.getText() + "sinh(" + String.valueOf(num2) + ")");
                num2 = Math.sinh(num2);
            }
            if (Pos == 1) {
                num1 = num1 + num2;
            }
            if (Pos == 2) {
                num1 = num1 - num2;
            }
            if (Pos == 3) {
                num1 = num1 * num2;
            }
            if (Pos == 4) {
                num1 = num1 / num2;
            }
            if (Pos == 5) {
                num1 = num1 * num2 / 100;
            }
            Field2.setText(String.valueOf(num1));
            Pos = 0;
        }
    }//GEN-LAST:event_sinActionPerformed

    private void cosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosActionPerformed

        if (!sh) {
            if (!degr) {

                if (Pos == 0) {
                    num1 = Double.parseDouble(Field2.getText());
                    Field1.setText("cos(" + String.valueOf(num1) + ")");
                    num1 = num1 * 0.0174532925;
                    num1 = Math.cos(num1);
                } else {
                    num2 = Double.parseDouble(Field2.getText());
                    Field1.setText(Field1.getText() + "cos(" + String.valueOf(num2) + ")");
                    num2 = num2 * 0.0174532925;
                    num2 = Math.cos(num2);
                }
                if (Pos == 1) {
                    num1 = num1 + num2;
                }
                if (Pos == 2) {
                    num1 = num1 - num2;
                }
                if (Pos == 3) {
                    num1 = num1 * num2;
                }
                if (Pos == 4) {
                    num1 = num1 / num2;
                }
                if (Pos == 5) {
                    num1 = num1 * num2 / 100;
                }
                Field2.setText(String.valueOf(num1));
                Pos = 0;
            }
            else
            {
                if (Pos == 0) {
                    num1 = Double.parseDouble(Field2.getText());
                    Field1.setText("cos(" + String.valueOf(num1) + ")");
                    num1 = Math.cos(num1);
                } else {
                    num2 = Double.parseDouble(Field2.getText());
                    Field1.setText(Field1.getText() + "cos(" + String.valueOf(num2) + ")");
                    num2 = Math.cos(num2);
                }
                if (Pos == 1) {
                    num1 = num1 + num2;
                }
                if (Pos == 2) {
                    num1 = num1 - num2;
                }
                if (Pos == 3) {
                    num1 = num1 * num2;
                }
                if (Pos == 4) {
                    num1 = num1 / num2;
                }
                if (Pos == 5) {
                    num1 = num1 * num2 / 100;
                }
                Field2.setText(String.valueOf(num1));
                Pos = 0;
            }
        } else {

            if (Pos == 0) {
                num1 = Double.parseDouble(Field2.getText());
                Field1.setText("cosh(" + String.valueOf(num1) + ")");
                num1 = Math.cosh(num1);
            } else {
                num2 = Double.parseDouble(Field2.getText());
                Field1.setText(Field1.getText() + "cosh(" + String.valueOf(num2) + ")");
                num2 = Math.cosh(num2);
            }
            if (Pos == 1) {
                num1 = num1 + num2;
            }
            if (Pos == 2) {
                num1 = num1 - num2;
            }
            if (Pos == 3) {
                num1 = num1 * num2;
            }
            if (Pos == 4) {
                num1 = num1 / num2;
            }
            if (Pos == 5) {
                num1 = num1 * num2 / 100;
            }
            Field2.setText(String.valueOf(num1));
            Pos = 0;
        }
    }//GEN-LAST:event_cosActionPerformed

    private void tanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanActionPerformed

        if (!sh) {
            if (!degr) {

                if (Pos == 0) {
                    num1 = Double.parseDouble(Field2.getText());
                    Field1.setText("tan(" + String.valueOf(num1) + ")");
                    num1 = num1 * 0.0174532925;
                    num1 = Math.tan(num1);
                } else {
                    num2 = Double.parseDouble(Field2.getText());
                    Field1.setText(Field1.getText() + "tan(" + String.valueOf(num2) + ")");
                    num2 = num2 * 0.0174532925;
                    num2 = Math.tan(num2);
                }
                if (Pos == 1) {
                    num1 = num1 + num2;
                }
                if (Pos == 2) {
                    num1 = num1 - num2;
                }
                if (Pos == 3) {
                    num1 = num1 * num2;
                }
                if (Pos == 4) {
                    num1 = num1 / num2;
                }
                if (Pos == 5) {
                    num1 = num1 * num2 / 100;
                }
                Field2.setText(String.valueOf(num1));
                Pos = 0;
            }
            else
            {
                if (Pos == 0) {
                    num1 = Double.parseDouble(Field2.getText());
                    Field1.setText("tan(" + String.valueOf(num1) + ")");
                    num1 = Math.tan(num1);
                } else {
                    num2 = Double.parseDouble(Field2.getText());
                    Field1.setText(Field1.getText() + "tan(" + String.valueOf(num2) + ")");
                    num2 = Math.tan(num2);
                }
                if (Pos == 1) {
                    num1 = num1 + num2;
                }
                if (Pos == 2) {
                    num1 = num1 - num2;
                }
                if (Pos == 3) {
                    num1 = num1 * num2;
                }
                if (Pos == 4) {
                    num1 = num1 / num2;
                }
                if (Pos == 5) {
                    num1 = num1 * num2 / 100;
                }
                Field2.setText(String.valueOf(num1));
                Pos = 0;
            }
        } else {

            if (Pos == 0) {
                num1 = Double.parseDouble(Field2.getText());
                Field1.setText("tanh(" + String.valueOf(num1) + ")");
                num1 = Math.tanh(num1);
            } else {
                num2 = Double.parseDouble(Field2.getText());
                Field1.setText(Field1.getText() + "tanh(" + String.valueOf(num2) + ")");
                num2 = Math.tanh(num2);
            }
            if (Pos == 1) {
                num1 = num1 + num2;
            }
            if (Pos == 2) {
                num1 = num1 - num2;
            }
            if (Pos == 3) {
                num1 = num1 * num2;
            }
            if (Pos == 4) {
                num1 = num1 / num2;
            }
            if (Pos == 5) {
                num1 = num1 * num2 / 100;
            }
            Field2.setText(String.valueOf(num1));
            Pos = 0;
        }
    }//GEN-LAST:event_tanActionPerformed

    private void rootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootActionPerformed

        if (Pos == 0) {
            num1 = Double.parseDouble(Field2.getText());
            Field1.setText("√" + String.valueOf(num1));
            num1 = Math.sqrt(num1);
        } else {
            num2 = Double.parseDouble(Field2.getText());
            Field1.setText(Field1.getText() + "√" + String.valueOf(num2));
            num2 = Math.sqrt(num2);
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field2.setText(String.valueOf(num1));
        Pos = 0;
    }//GEN-LAST:event_rootActionPerformed

    private void cubedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cubedActionPerformed

        if (Pos == 0) {
            num1 = Double.parseDouble(Field2.getText());
            Field1.setText(String.valueOf(num1) + "³");
            num1 = num1 * num1 * num1;
        } else {
            num2 = Double.parseDouble(Field2.getText());
            Field1.setText(Field1.getText() + String.valueOf(num2) + "³");
            num2 = num2 * num2 * num2;
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field2.setText(String.valueOf(num1));
        Pos = 0;
    }//GEN-LAST:event_cubedActionPerformed

    private void squarerootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squarerootActionPerformed

        if (Pos == 0) {
            num1 = Double.parseDouble(Field2.getText());
            Field1.setText("³√" + String.valueOf(num1));
            num1 = Math.cbrt(num1);
        } else {
            num2 = Double.parseDouble(Field2.getText());
            Field1.setText(Field1.getText() + "³√" + String.valueOf(num2));
            num2 = Math.cbrt(num2);
        }
        if (Pos == 1) {
            num1 = num1 + num2;
        }
        if (Pos == 2) {
            num1 = num1 - num2;
        }
        if (Pos == 3) {
            num1 = num1 * num2;
        }
        if (Pos == 4) {
            num1 = num1 / num2;
        }
        if (Pos == 5) {
            num1 = num1 * num2 / 100;
        }
        Field2.setText(String.valueOf(num1));
        Pos = 0;
    }//GEN-LAST:event_squarerootActionPerformed

    private void DegreesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DegreesFocusGained
       
    }//GEN-LAST:event_DegreesFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Degrees;
    private javax.swing.JTextField Field1;
    private javax.swing.JTextField Field2;
    private javax.swing.JTextField Field3;
    private javax.swing.JButton PI;
    private javax.swing.JRadioButton Radians;
    private javax.swing.JButton add;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton clear;
    private javax.swing.JButton cos;
    private javax.swing.JButton cubed;
    private javax.swing.JButton decpoint;
    private javax.swing.JButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton equal;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton memoryclear;
    private javax.swing.JButton memoryread;
    private javax.swing.JButton memorysave;
    private javax.swing.JButton multiply;
    private javax.swing.JButton negative;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton onedividednumber;
    private javax.swing.JButton percent;
    private javax.swing.JButton reset;
    private javax.swing.JButton root;
    private javax.swing.JButton seven;
    private javax.swing.JToggleButton shift;
    private javax.swing.JButton sin;
    private javax.swing.JButton six;
    private javax.swing.JButton square;
    private javax.swing.JButton squareroot;
    private javax.swing.JButton subtracte;
    private javax.swing.JButton tan;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
}
